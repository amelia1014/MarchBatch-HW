Answer following questions
1.	In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?

I would prefer Join. Because subquery is easier to write, but a joint might be better optimized by the server. 
The advantage of a join includes that it executes faster, But they are not as easy to read as subqueries.
Subqueries divide the complex query into isolated parts so that a complex query can be broken down into a series of logical steps.

2.	What is CTE and when to use it?
A Common Table Expression (CTE) is the result set of a query which exists temporarily and for use only within the context of a larger query.
Use it when needing to reference a derived table multiple times in a single query 
and performing the same calculation multiple times over across multiple query components

3.	What are Table Variables? What is their scope and where are they created in SQL Server?
table variable is scoped to the stored procedure, batch, or user-defined function just like any local variable you create with a DECLARE statement

4.	What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
Truncate can be used to delete the entire data of the table without maintaining the integrity of the table. On the other hand , 
delete statement can be used for deleting the specific data.

5.	What is Identity column? How does DELETE and TRUNCATE affect it?
An identity column is a column (also known as a field) in a database table that is made up of values generated by the database. 
When the TRUNCATE statement is executed it will remove all the rows. However, when a new record is inserted the identity value is increased from 11. 
TRUNCATE resets the identity value to the original seed value of the table

6.	What is difference between “delete from table_name” and “truncate table table_name”?
TRUNCATE always removes all the rows from a table, leaving the table empty and the table structure 
intact whereas DELETE may remove conditionally if the where clause is used.

Write queries for following scenarios
All scenarios are based on Database NORTHWND.
1.	List all cities that have both Employees and Customers.

SELECT City 
From Employees
WHERE City IN
(SELECT City FROM Customers)

2.	List all cities that have Customers but no Employee.
a.	Use sub-query

SELECT City 
From Customers
WHERE City NOT IN
(SELECT City FROM Employees)

b.	Do not use sub-query

SELECT C.City 
FROM Customers C
JOIN Orders O
ON O.CustomerId = C.CustomerId
JOIN Employees E
ON E.EmployeeId = O.CustomerId
WHERE E.City IS NULL;

3.	List all products and their total order quantities throughout all orders.

SELECT P.ProductName, COUNT(Od.Quantity)
FROM Products P
JOIN OrderDetails Od
On P.ProductId = O.ProductId
GROUP BY Od.Quantity

4.	List all Customer Cities and total products ordered by that city.
SELECT C.City, COUNT(ProductId) As TotalProduct
FROM Customer C
LEFT JOIN
(
SELECT O.ShippCity as City, Od.ProductId 
FROM Orders O
JOIN OrderDetails Od
On O.OrderId = Od.OrderId) as A
On C.City = A.City

5.	List all Customer Cities that have at least two customers.

SELECT City
FROM Customer
GROUP BY City
Having COUNT(CustomerId) > 2

6.	List all Customer Cities that have ordered at least two different kinds of products.

select T1.customer_name, T1.customer_ID, T2.number_of_products_ordered
from customer_table T1
inner join 
(
    select cust.customer_ID as customer_identity, count(distinct ord.product_ID) as number_of_products_ordered
    from customer_table cust
    inner join order_table ord on cust.customer_ID=ord.customer_ID
    group by ord.customer_ID, ord.product_ID
    having count(distinct ord.product_ID) > 10
) T2
on T1.customer_ID=T2.customer_identity
order by T2.number_of_products_ordered, T1.customer_name

7.	List all Customers who have ordered products, but have the ‘ship city’ on the order different from their own customer cities.
SELECT C.CustomerId
FROM Customer C
JOIN Orders O
On C.CustomerId = O.CustomerId
WHERE C.City <> O.ShippCity

8.	List 5 most popular products, their average price, and the customer city that ordered most quantity of it.
SELECT TOP 5 ProductName, AVG(UnitPrice)

9.	List all cities that have never ordered something but we have employees there.
SELECT C.City 
FROM Customers C
JOIN Orders O
ON O.CustomerId = C.CustomerId
JOIN Employees E
ON E.EmployeeId = O.CustomerId
WHERE E.EmployeeId IS NULL;

10.	List one city, if exists, that is the city from where the employee sold most orders (not the product quantity) is, and also the city of most total quantity of products ordered from. (tip: join  sub-query)
SELECT C.City, COUNT(ProductId) As TotalProduct
FROM Customer C
LEFT JOIN
(
SELECT O.ShippCity as City, Od.ProductId 
FROM Orders O
JOIN OrderDetails Od
On O.OrderId = Od.OrderId) as A
On C.City = A.City

11. How do you remove the duplicates record of a table?
Using Distinct

12. Sample table to be used for solutions below- Employee ( empid integer, mgrid integer, deptid integer, salary integer) Dept (deptid integer, deptname text)
 Find employees who do not manage anybody.
 SELECT M.EmpId FROM Employee M
 WHERE Empid NOT IN(
 SELECT M.EmpId
 FROM Employee E
 JOIN Employee M
 ON E.EmpId = M.EmpId)

13. Find departments that have maximum number of employees. 
(solution should consider scenario having more than 1 departments that have maximum number of employees). Result should only have - deptname, count of employees sorted by deptname.

SELECT Top 1 DepId
FROM Dept d
JOIN Employee e
ON d.DepId = e.DepId
GROUP by Employee
ORDER BY COUNT(EmpId) DESC


14. Find top 3 employees (salary based) in every department. Result should have deptname, empid, salary sorted by deptname and then employee with high to low salary.
SELECT TOP 3 Salary
FROM(
SELECT DISTINCT TOP 3 Salary
FROM Employee
ORDER BY Salary DESC) Result
ORDER BY Salary
