Exercise 2：

using System;
 
class Solution {
     
    static int mostFrequent(int []arr, int n)
    {
         
        // Sort the array
        Array.Sort(arr);
         
        // find the max frequency using
        // linear traversal
        int max_count = 1, res = arr[0];
        int curr_count = 1;
         
        for (int i = 1; i < n; i++)
        {
            if (arr[i] == arr[i - 1])
                curr_count++;
            else
            {
                if (curr_count > max_count)
                {
                    max_count = curr_count;
                    res = arr[i - 1];
                }
                curr_count = 1;
            }
        }
     
        // If last element is most frequent
        if (curr_count > max_count)
        {
            max_count = curr_count;
            res = arr[n - 1];
        }
     
        return res;
    }
     
    // Driver code
    public static void Main ()
    {
         
        int []arr = {1, 5, 2, 1, 3, 2, 1};
        int n = arr.Length;
         
        Console.WriteLine(mostFrequent(arr,n));
         
    }
}
 
Exercise 3：
using System;
 
class Solution {
 
    // Function to count squares
    static int countSquares(int a, int b)
    {
        // Initialize result
        int cnt = 0;
 
        // Traverse through all numbers
        for (int i = a; i <= b; i++)
 
            // Check if current number
            // 'i' is perfect square
            for (int j = 1; j * j <= i; j++)
                if (j * j == i)
                    cnt++;
        return cnt;
    }
 
    // Driver Code
    public static void Main()
    {
        int a = 9, b = 25;
        Console.Write("Count of squares is " + countSquares(a, b));
    }
}

Exercise 4：
using System;
 
class Solution {
    // Function print matrix in spiral form
    static void spiralPrint(int m, int n, int[, ] a)
    {
        int i, k = 0, l = 0;
        /* k - starting row index
        m - ending row index
        l - starting column index
        n - ending column index
        i - iterator
        */
 
        while (k < m && l < n) {
            // Print the first row
            // from the remaining rows
            for (i = l; i < n; ++i) {
                Console.Write(a[k, i] + " ");
            }
            k++;
 
            // Print the last column from the
            // remaining columns
            for (i = k; i < m; ++i) {
                Console.Write(a[i, n - 1] + " ");
            }
            n--;
 
            // Print the last row from
            // the remaining rows
            if (k < m) {
                for (i = n - 1; i >= l; --i) {
                    Console.Write(a[m - 1, i] + " ");
                }
                m--;
            }
 
            // Print the first column from
            // the remaining columns
            if (l < n) {
                for (i = m - 1; i >= k; --i) {
                    Console.Write(a[i, l] + " ");
                }
                l++;
            }
        }
    }
 
    // Driver Code
    public static void Main()
    {
        int R = 3;
        int C = 6;
        int[, ] a = { { 1, 2, 3, 4, 5, 6 },
                      { 7, 8, 9, 10, 11, 12 },
                      { 13, 14, 15, 16, 17, 18 } };
         
          // Function Call
          spiralPrint(R, C, a);
    }
}

Exercise 5：
public double getVolume()
      {
         return length * breadth * height;
      }
      public void setLength( double len )
      {
         length = len;
      }
 
      public void setBreadth( double bre )
      {
         breadth = bre;
      }
 
      public void setHeight( double hei )
      {
         height = hei;
      }
 

